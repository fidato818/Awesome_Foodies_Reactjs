 <AppBar position="static" color="default" key="appbar">
                  <Tabs
                    value={this.state.value}
                    onChange={this.handleChangeTabs}
                    indicatorColor="primary"
                    textColor="primary"
                    variant="fullWidth" >
                    <Tab label="Customer" />
                    <Tab label="Owner" />
                  </Tabs>
                </AppBar>

                <SwipeableViews
                  axis={theme.direction === "rtl" ? "x-reverse" : "x"}
                  index={this.state.value}
                  onChangeIndex={this.handleChangeIndex}
                >
                  <TabContainer dir={theme.direction}>
                  
                  </TabContainer>              
                </SwipeableViews>
                  <TabContainer dir={theme.direction}>
                    <form >
                      <Paper className={classes.paper}>
                      <Typography variant="h6" gutterBottom>
                        Register as Resturant Owner
                      </Typography>
                      <Grid container spacing={3}>
                        <Grid item xs={12}>
                          <TextField
                            required
                            name="fullname"
                            label="Full Name"
                            type="text"
                            fullWidth
                            autoComplete="fname"
                            onChange={this.handleChange}
                          />
                        </Grid>
                        <Grid item xs={12}>
                          <TextField
                            required
                            id="email"
                            name="email"
                            label="Email"
                            type="email"
                            onChange={this.handleChange}
                            fullWidth
                            autoComplete=""
                          />
                        </Grid>
                        <Grid item xs={12} sm={6}>
                          <InputLabel htmlFor="standard-adornment-password">Password</InputLabel>
                          <Input

                            id="standard-adornment-password"
                            name="password"
                            type={this.state.showPassword ? 'text' : 'password'}
                            value={this.state.password || ''}
                            onChange={this.handleChange}
                            endAdornment={
                              <InputAdornment position="end">
                                <IconButton
                                  aria-label="toggle password visibility"
                                  onClick={this.handleClickShowPassword}
                                  onMouseDown={this.handleMouseDownPassword}
                                >
                                  {this.state.showPassword ? <Visibility /> : <VisibilityOff />}
                                </IconButton>
                              </InputAdornment>
                            }
                          />
                        </Grid>
                        <Grid item xs={12} sm={6}>
                          <InputLabel htmlFor="standard-adornment-password">Confirm Password</InputLabel>
                          <Input

                            id="standard-adornment-password"
                            name="confirmPassword"
                            type={this.state.showPassword ? 'text' : 'password'}
                            value={this.state.confirmPassword || ''}
                            onChange={this.handleChange}
                            endAdornment={
                              <InputAdornment position="end">
                                <IconButton
                                  aria-label="toggle password visibility"
                                  onClick={this.handleClickShowPassword}
                                  onMouseDown={this.handleMouseDownPassword}
                                >
                                  {this.state.showPassword ? <Visibility /> : <VisibilityOff />}
                                </IconButton>
                              </InputAdornment>
                            }
                          />
                        </Grid>


                        <Grid item sm={6}>
                          <CountryDropdown
                            label="Country"
                            required
                            value={country}
                            onChange={val => this.selectCountry(val)}
                            countryvaluetype="short"
                            style={menuStyles}
                          />
                        </Grid>

                        <Grid item sm={6}>
                          <RegionDropdown
                            country={country}
                            value={region}
                            onChange={val => this.selectRegion(val)}
                            style={dropStyles}
                          />
                        </Grid>


                      </Grid>
                      <br />
                      <Button
                        value="Submit"
                        variant="outlined"
                        color="primary"
                        fullWidth
                        className={classes.button}
                        onClick={() => this.handleSubmitAdmin()}
                      >
                        Register
                      </Button>
                    </form>
                    <Grid container justify="flex-end">
                      <Grid item>
                        <div href="#" variant="body2">
                          <Typography
                            variant="caption"
                            display="block"
                            gutterBottom
                            style={{ cursor: "pointer" }}
                            onClick={() => {
                              history.push("/Login");
                            }}
                          >
                            Already have an account? Sign in
                          </Typography>
                        </div>
                      </Grid>
                    </Grid>
                  </TabContainer>












                    /********************* FullName FOR CUSTOMER****************************/
  setFullName(event) {
    if (event.target.value.length !== 0 || event.target.value == null) {
      this.setState({
        errorNamehelperText: "",
        errorName: false,
        fullname: event.target.value
      });
    } else {
      this.setState({
        errorNamehelperText: "Please Enter Full Name",
        errorName: true
      });
    }
  }
  /*************************************************/
  setEmail(event) {
    if (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(event.target.value)) {
      this.setState({
        errorEmailhelperText: "",
        errorEmail: false,
        email: event.target.value
      });
    } else {
      this.setState({
        errorEmailhelperText: "Please valid email",
        errorEmail: true
      });
    }
  }
  /*************************************************/
  passwordUser(event) {
    // this.setState({
    //   password: event.target.value
    // });
    if (event.target.value.length !== 0 || event.target.value == null) {
      this.setState({
        errorPasswordhelperText: "",
        errorPassword: false,
        password: event.target.value
      });
    } else {
      this.setState({
        errorPasswordhelperText: "Please Enter a Valid Password",
        errorPassword: true
      });
    }
  }










    handleSubmit = (event) => {
    const { history } = this.props;
    const {
      gender,
      email,
      fullname,
      password,
      confirmPassword,
      age, region,
      country, select,
      resturantValid, resturantName, image
    } = this.state;
    var cartData = resturantValid.filter((item) => item.resturantName === resturantName)
    console.log(cartData)
    if (select === 'Customer') {
      if (fullname === "") {
        this.setState({
          errorfullname: !this.state.errorfullname,
        });
      } else
        if (email === '' || email === null) {
          this.setState({
            errorE: !this.state.errorE,
          });
        } else
          if (password.length <= 5 || password === '') {
            this.setState({
              errorP: !this.state.errorP,
            });
          } else
            if (confirmPassword === '' || confirmPassword !== password) {
              this.setState({
                errorCP: !this.state.errorCP,
              });
            } else
              if (country === '') {
                this.setState({
                  errorC: !this.state.errorC,
                });
              } else
                if (region === '') {
                  this.setState({
                    errorR: !this.state.errorR,
                  });
                } else
                  if (gender === '') {
                    this.setState({
                      errorG: !this.state.errorG,
                      // errorfullnamehelperText: "",
                    });
                  } else if (age === '') {
                    this.setState({
                      errorAge: !this.state.errorAge,
                      // errorfullnamehelperText: "",
                    });
                  }
                  else {
                    firebase
                      .auth()
                      .createUserWithEmailAndPassword(email, password)
                      .then(res => {
                        var userId = firebase.auth().currentUser.uid;
                        firebase
                          .database()
                          .ref("Users/" + userId)
                          .set({
                            gender,
                            email,
                            fullname,
                            password,
                            confirmPassword,
                            age,
                            region,
                            country,
                            userId,
                            createAt: new Date().toLocaleString()
                          })
                          .then(() => {
                            console.log("Document successfully written!");
                            // this.setState(state => ({
                            // message: state.text,
                            // open: true
                            // }));
                            // alert("Successfully Register");
                            setTimeout(
                              function () {
                                // history.push("/emailverification");
                              },
                              2000
                            );
                          })
                          .catch((error) => {
                            console.log("Error writing document: ", `${error}`);
                          });
                      }).catch((error) => {
                        var errorCode = error.code;
                        var errorMessage = error.message;
                        if (errorCode === 'auth/invalid-email') {
                          this.setState({
                            openSnack: !this.state.openSnack,
                            message: errorMessage
                          })
                        }
                        if (errorCode === 'auth/wrong-password') {
                          this.setState({
                            openSnack: !this.state.openSnack,
                            message: errorMessage
                          })
                        }
                        if (errorCode === 'auth/user-not-found') {
                          this.setState({
                            openSnack: !this.state.openSnack,
                            message: errorMessage,
                          })
                        }
                        if (errorCode === 'auth/email-already-in-use') {
                          this.setState({
                            message: errorMessage,
                          })
                        }

                        console.log("Error writing document: ", `${error}`);
                        // alert('Error: ', errorMessage)
                      });
                  }

    } else
      if (select === 'Resturant-Owner') {
        if (fullname === "") {
          this.setState({
            errorfullname: !this.state.errorfullname,
          });
        } else
          if (email === '' || email === null) {
            this.setState({
              errorE: !this.state.errorE,
            });
          } else
            if (password.length <= 5 || password === '') {
              this.setState({
                errorP: !this.state.errorP,
              });
            } else
              if (confirmPassword === '' || confirmPassword !== password) {
                this.setState({
                  errorCP: !this.state.errorCP,
                });
              } else
                if (country === '') {
                  this.setState({
                    errorC: !this.state.errorC,
                  });
                } else
                  if (region === '') {
                    this.setState({
                      errorR: !this.state.errorR,
                    });
                  } else
                    if (resturantName === '') {
                      this.setState({
                        errorRE: !this.state.errorRE,
                        errorTextVaild: 'Please Fill Resturant Field'
                      })
                    } else
                      if (cartData.length === 0) {
                        this.setState({
                          // errorRE: !this.state.errorRE,
                          errorTextVaild: ''
                        })
                      } else
                        if (cartData) {
                          this.setState({
                            errorRE: !this.state.errorRE,
                            errorTextVaild: 'This Resturant is Already Exist'
                          })
                        } else
                        if (image === undefined) {
                        // if (image === null) {
                          alert('please add Image')
                          // this.setState({
                          //   errorIM: !this.state.errorIM
                          // })
                        } else
                        {
                          firebase
                            .storage()
                            .ref(`Restaurant_Certificate/${image.name}`)
                            .put(image)
                            .then(snapshot => {
                              return snapshot.ref.getDownloadURL(); // Will return a promise with the download link
                            })
                            .then(downloadURL => {
                              console.log(
                                `Successfully uploaded file and got download link - ${downloadURL}`
                              );
                              this.setState({ url: downloadURL });
                              firebase
                                .auth()
                                .createUserWithEmailAndPassword(email, password)
                                .then(res => {
                                  var userId = firebase.auth().currentUser.uid;
                                  var obj = {
                                    email,
                                    fullname,
                                    password,
                                    confirmPassword,
                                    userId,
                                    downloadURL,
                                    region,
                                    country,
                                    resturantName,
                                    createAt: new Date().toLocaleString()
                                  }
                                  firebase
                                    .database()
                                    .ref("Resturant_Owner/" + userId)
                                    .set(obj)
                                    .then(() => {
                                      console.log("Document successfully written!");
                                      alert("Successfully Register");
                                      // history.push("/emailverification");
                                    })
                                    .catch((error) => {
                                      console.error("Error writing document: ", error);
                                    });
                                })
                                .catch((error) => {
                                  var errorCode = error.code;
                                  var errorMessage = error.message;
                                  if (errorCode === 'auth/invalid-email') {
                                    this.setState({
                                      errorEmail: errorMessage
                                    })
                                  }
                                  if (errorCode === 'auth/wrong-password') {
                                    this.setState({
                                      errorPassword: errorMessage
                                    })
                                  }
                                  if (errorCode === 'auth/user-not-found') {
                                    this.setState({
                                      message: errorMessage,
                                    })
                                  }
                                  if (errorCode === 'auth/email-already-in-use') {
                                    this.setState({
                                      message: errorMessage,
                                    })
                                  }
                                  console.error("Error writing document: ", error);
                                });
                            });
                        }
      }
      else {
        alert('something went Wrong')
      }
  }




















 {/* <Table component={Paper} elevation={3} className={classes.table} aria-label="customized table" fixedHeader={false} style={{ tableLayout: "auto" }} >
                      <TableHead style={{ margin: 30 }}>
                        <TableRow>
                          <TableCell >S#</TableCell>
                          <TableCell >Order Name</TableCell>
                          <TableCell align="center" >Customer Name</TableCell>
                          <TableCell align="center" >Order Date</TableCell>
                          <TableCell align="center" >Quantity</TableCell>
                          <TableCell align="center" >Actions</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {asd
                          .slice(
                            page * rowsPerPage,
                            page * rowsPerPage + rowsPerPage
                          )
                          .map((e, index) => {
                            // console.log("Remove succeeded.", e);
                            return (
                              e.resturantId === user.userResturant.user.uid ? (
                                <TableRow index={index + 1} id={e.id}>
                                  <TableCell component="th" scope="row">
                                    {index + 1}
                                  </TableCell>
                                  <TableCell component="th" scope="row">
                                    {e.name}
                                  </TableCell>
                                  <TableCell align="center">
                                    {e.userEmail}
                                  </TableCell>

                                  <TableCell align="center">
                                    {e.date}
                                  </TableCell>
                                  <TableCell align="center">
                                    {e.quantity}
                                  </TableCell>
                                  <TableCell align="center">
                                    <div>
                                      <Button
                                        variant="contained"
                                        size="small"
                                        color="primary"
                                        className={classes.margin}
                                        onClick={() =>
                                          this.processItem(
                                            e.id, e.name, e.price,
                                            e.quantity, e.userId, e.userEmail
                                          )
                                        }
                                      >
                                        Process Order
                                        </Button>
                                    </div>
                                  </TableCell>
                                </TableRow>
                              ) : (

                                  <TableRow >
                                    <TableCell colSpan={0} rowSpan={0}> <Typography variant="h5" color="textSecondary" style={{ display: 'flex', justifyContent: 'center' }}>
                                      {/* Nothing Any Order Add in My Orders */}
                                    </Typography></TableCell>
                                  </TableRow>
                                )
                            );
                          })}
                        {emptyRows > 0 && (
                          <TableRow style={{ height: 49 * emptyRows }}>
                            <TableCell colSpan={6} />
                          </TableRow>
                        )}
                      </TableBody>
                      <TablePagination
                        rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}
                        // component="div"
                        count={asd.length}
                        //  colSpan={3}
                        rowsPerPage={rowsPerPage}
                        page={page}
                        onChangePage={this.handleChangePage}
                        onChangeRowsPerPage={this.handleChangeRowsPerPage}
                      />
                    </Table>